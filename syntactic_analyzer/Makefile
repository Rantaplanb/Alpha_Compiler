# Makefile for alphac

CC = gcc
CFLAGS = -Wall -pedantic

BUILD_DIR = ../bin
TESTS_DIR = test_files
LIBS_DIR = libs
OBJFILES = libs/stack.o libs/structs.o libs/symtable.o libs/symlist.o
TEST_FILES = $(TESTS_DIR)/test01 $(TESTS_DIR)/test02 $(TESTS_DIR)/test03\
             $(TESTS_DIR)/test04 $(TESTS_DIR)/test05

.PHONY: libs clean all format

all: parser


parser: libs
	@mkdir -p $(BUILD_DIR)
	@bison -v --yacc --defines --output=parser.c parser.y
	@printf "\n-> parser.h and parser.c files successfully generated by bison"
	@flex --outfile=scanner.c scanner.l
	@printf "\n-> scanner.h and scanner.c files successfully generated by flex"
	@$(CC) -o $(BUILD_DIR)/parser $(LIBS_DIR)/*.o parser.c scanner.c
	@printf "\n-> parser successfully built in /bin\n\n"
	@rm -f parser.c parser.h scanner.c scanner.h


libs: $(OBJFILES)

$(LIBS_DIR)/%.o: $(LIBS_DIR)/%.c $(LIBS_DIR)/%.h
	@$(CC) $(CFLAGS) -ggdb3 -c $< -o $@


# Valgrind memcheck test
# memcheck: parser
# 	@valgrind --leak-check=full \
# 	         --show-leak-kinds=definite,indirect,possible,reachable \
# 	         --track-origins=yes \
# 	         --verbose \
# 	         --log-file=memcheck.out \
# 	         $(BUILD_DIR)/al $(TESTS_DIR)/all.txt > /dev/null
# 	@printf "\n-> Valgrind memcheck log file (memcheck.out) generated\n\n"


# Tests
test_all: parser $(TEST_FILES)

$(TESTS_DIR)/%:
	@printf "\n\n\n"
	@printf "Testing: $@.txt\n\
	vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n"
	@./$(BUILD_DIR)/parser $@.txt
	@printf "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n"


# Formatting
format:
	@find . -name "*.[ch]" | xargs clang-format -style=file -i


# Cleaning stuff
clean:
	@find . -name "*~" | xargs rm -f
	@rm -f $(BUILD_DIR)/* parser.output memcheck.out
	@clear

distclean: clean
	@rm -f  $(LIBS_DIR)/*.o
	@clear
